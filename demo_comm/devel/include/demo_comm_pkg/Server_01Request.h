// Generated by gencpp from file demo_comm_pkg/Server_01Request.msg
// DO NOT EDIT!


#ifndef DEMO_COMM_PKG_MESSAGE_SERVER_01REQUEST_H
#define DEMO_COMM_PKG_MESSAGE_SERVER_01REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo_comm_pkg
{
template <class ContainerAllocator>
struct Server_01Request_
{
  typedef Server_01Request_<ContainerAllocator> Type;

  Server_01Request_()
    : request_01(0)
    , request_02(0)  {
    }
  Server_01Request_(const ContainerAllocator& _alloc)
    : request_01(0)
    , request_02(0)  {
  (void)_alloc;
    }



   typedef int32_t _request_01_type;
  _request_01_type request_01;

   typedef int32_t _request_02_type;
  _request_02_type request_02;





  typedef boost::shared_ptr< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> const> ConstPtr;

}; // struct Server_01Request_

typedef ::demo_comm_pkg::Server_01Request_<std::allocator<void> > Server_01Request;

typedef boost::shared_ptr< ::demo_comm_pkg::Server_01Request > Server_01RequestPtr;
typedef boost::shared_ptr< ::demo_comm_pkg::Server_01Request const> Server_01RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo_comm_pkg::Server_01Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo_comm_pkg::Server_01Request_<ContainerAllocator1> & lhs, const ::demo_comm_pkg::Server_01Request_<ContainerAllocator2> & rhs)
{
  return lhs.request_01 == rhs.request_01 &&
    lhs.request_02 == rhs.request_02;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo_comm_pkg::Server_01Request_<ContainerAllocator1> & lhs, const ::demo_comm_pkg::Server_01Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo_comm_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfbb3b61f98fac64645c1af0e772e8dc";
  }

  static const char* value(const ::demo_comm_pkg::Server_01Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfbb3b61f98fac64ULL;
  static const uint64_t static_value2 = 0x645c1af0e772e8dcULL;
};

template<class ContainerAllocator>
struct DataType< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo_comm_pkg/Server_01Request";
  }

  static const char* value(const ::demo_comm_pkg::Server_01Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#####自定义服务的格式\n"
"#\n"
"# ----------\n"
"# 客户端请求发送的数据\n"
"# ---  \n"
"# 服务器响应发送的数据\n"
"#\n"
"###################\n"
"int32 request_01\n"
"int32 request_02\n"
;
  }

  static const char* value(const ::demo_comm_pkg::Server_01Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_01);
      stream.next(m.request_02);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Server_01Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo_comm_pkg::Server_01Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo_comm_pkg::Server_01Request_<ContainerAllocator>& v)
  {
    s << indent << "request_01: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_01);
    s << indent << "request_02: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_02);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO_COMM_PKG_MESSAGE_SERVER_01REQUEST_H
